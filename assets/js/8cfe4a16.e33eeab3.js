"use strict";(self.webpackChunktech_docs=self.webpackChunktech_docs||[]).push([[5103],{512:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"tools/vector-similarity-search","title":"Vector Similarity Search","description":"Vector similarity search tools provide efficient algorithms and implementations for finding similar items in large collections of vectors.","source":"@site/docs/tools/vector-similarity-search.md","sourceDirName":"tools","slug":"/tools/vector-similarity-search","permalink":"/ai-katas/tools/vector-similarity-search","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"Vector Databases","permalink":"/ai-katas/tools/vector-databases"},"next":{"title":"Visual Feature Extractors","permalink":"/ai-katas/tools/visual-feature-extractors"}}');var t=i(4848),l=i(8453);const r={},o="Vector Similarity Search",c={},a=[{value:"When to Use",id:"when-to-use",level:2},{value:"When Not to Use",id:"when-not-to-use",level:2},{value:"Tradeoffs",id:"tradeoffs",level:2},{value:"Commercial Implementations",id:"commercial-implementations",level:2},{value:"Common Combinations",id:"common-combinations",level:2},{value:"Case Study: Music Recommendation System",id:"case-study-music-recommendation-system",level:2},{value:"Challenge",id:"challenge",level:3},{value:"Solution",id:"solution",level:3},{value:"Results",id:"results",level:3}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"vector-similarity-search",children:"Vector Similarity Search"})}),"\n",(0,t.jsx)(n.p,{children:"Vector similarity search tools provide efficient algorithms and implementations for finding similar items in large collections of vectors."}),"\n",(0,t.jsx)(n.h2,{id:"when-to-use",children:"When to Use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When you need fast approximate nearest neighbor search"}),"\n",(0,t.jsx)(n.li,{children:"When exact similarity matches aren't required"}),"\n",(0,t.jsx)(n.li,{children:"When you have a fixed dataset that doesn't change frequently"}),"\n",(0,t.jsx)(n.li,{children:"When you need simple similarity search without complex database features"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"when-not-to-use",children:"When Not to Use"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When you need exact nearest neighbor search"}),"\n",(0,t.jsx)(n.li,{children:"When you need complex filtering alongside vector search"}),"\n",(0,t.jsx)(n.li,{children:"When you need real-time updates to the vector collection"}),"\n",(0,t.jsx)(n.li,{children:"When you need to store and manage metadata alongside vectors"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"tradeoffs",children:"Tradeoffs"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Accuracy vs Speed"}),": Faster search typically means less accurate results"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory vs Performance"}),": In-memory solutions are faster but more expensive"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simplicity vs Features"}),": Fewer features but easier to implement"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Static vs Dynamic"}),": Most solutions optimize for static datasets"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"commercial-implementations",children:"Commercial Implementations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Faiss (Facebook AI Similarity Search)"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Open source"}),"\n",(0,t.jsx)(n.li,{children:"High performance"}),"\n",(0,t.jsx)(n.li,{children:"Good for large-scale deployment"}),"\n",(0,t.jsx)(n.li,{children:"Limited to static datasets"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Annoy (Spotify)"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Open source"}),"\n",(0,t.jsx)(n.li,{children:"Memory efficient"}),"\n",(0,t.jsx)(n.li,{children:"Good for static datasets"}),"\n",(0,t.jsx)(n.li,{children:"Simple to use"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"HNSW"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Algorithm implemented in various tools"}),"\n",(0,t.jsx)(n.li,{children:"Very fast search"}),"\n",(0,t.jsx)(n.li,{children:"Memory intensive"}),"\n",(0,t.jsx)(n.li,{children:"Good accuracy"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"ScaNN (Google Research)"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Open source"}),"\n",(0,t.jsx)(n.li,{children:"Optimized for speed"}),"\n",(0,t.jsx)(n.li,{children:"Good accuracy/speed trade-off"}),"\n",(0,t.jsx)(n.li,{children:"Harder to deploy"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-combinations",children:"Common Combinations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Image search systems"}),"\n",(0,t.jsx)(n.li,{children:"Music recommendation"}),"\n",(0,t.jsx)(n.li,{children:"Document similarity"}),"\n",(0,t.jsx)(n.li,{children:"Duplicate detection"}),"\n",(0,t.jsx)(n.li,{children:"Feature matching"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"case-study-music-recommendation-system",children:"Case Study: Music Recommendation System"}),"\n",(0,t.jsx)(n.p,{children:"A music streaming service implemented vector similarity search for their recommendation system:"}),"\n",(0,t.jsx)(n.h3,{id:"challenge",children:"Challenge"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"50M+ songs"}),"\n",(0,t.jsx)(n.li,{children:"Need for fast recommendations"}),"\n",(0,t.jsx)(n.li,{children:"Limited computing resources"}),"\n",(0,t.jsx)(n.li,{children:"Batch updates only needed"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"solution",children:"Solution"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implemented Annoy"}),"\n",(0,t.jsx)(n.li,{children:"Pre-computed song embeddings"}),"\n",(0,t.jsx)(n.li,{children:"Built multiple trees for different aspects (rhythm, melody, genre)"}),"\n",(0,t.jsx)(n.li,{children:"Weekly batch updates"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"results",children:"Results"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Sub-10ms query times"}),"\n",(0,t.jsx)(n.li,{children:"2x improvement in recommendation relevance"}),"\n",(0,t.jsx)(n.li,{children:"Reduced infrastructure costs"}),"\n",(0,t.jsx)(n.li,{children:"Simpler maintenance compared to database solution"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var s=i(6540);const t={},l=s.createContext(t);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);